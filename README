Data Structures repository - part of The Odin Project Full Stack program - JS Path
Linked List |  HashMap |  Balanced Binary Search Tree

DS 1 - Linked List (LL)
    a. learning goal: implement a Linked list and its basic operations in JS from scratch
    
    b. Learned concepts:
      - Linked list can be build out of factory functions, Classes or Constructors and they are composed of two of these objects: a Node and the Linked List and an iteration logic
      -  I selected factory functions to build mine and did not based it oupon JS Arrays and array built-in methods, but rather an implementation that mimics the non-indexed memory allocation of a linked list.
        I built my iteration logic as follows: 
        - The first node ever appended becomes the head
        - Each subsequent node is assigned as its predecesor's pointer
        - Upon any appending, searching or removing operations, I assign the head to a temporary pointer (current = head) to start the iteration and use a while/for loop to iterate through each node's next (pointer) until the desired index is reached to perform the relevant action.

DS 2 - HashMap
    a. Learning goal: learn and implement a hash map and its basic operations. Include a growth method and a way to handle collisions
    
    b. Learned concepts:
    I enjoyed this project to my core. It was extremely challenging to understand this DS at first, but once I wrapped my head around the hashing concept, I was able to see how powerful the structure can be.

    I used a factory function to implement the hashMap, with the hasing function provided by TOP and I built all the basic functionalities on the mmain branch of this repository. Once done with the basic implementation, I went ahead and refactored it to handle collisions via a LinkedList instead of an array.

DS 3 - Balanced Binary Search Tree (BST)
    a. Learning goal: Learn and implement a balanced BST and its operations

    b. Learned concepts:
      - Traversals
      - Balanced vs unbalanced
      
      - I implemented the Tree and its nodes via ES6 Classes. This structure was complex to understand at first due to the fact that it uses recursion for most all of its methods. However, this is the fact that makes it so powerful. The most challenging methods to built were removal of an element and the traversals.